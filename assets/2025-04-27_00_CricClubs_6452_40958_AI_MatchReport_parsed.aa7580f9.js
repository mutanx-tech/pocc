var g="data:text/markdown;base64,T2theSwgaGVyZeKAmXMgYSBkZXRhaWxlZCBtYXRjaCByZXBvcnQgYmFzZWQgb24gdGhlIHByb3ZpZGVkIEpTT04gZGF0YSwgaW5jb3Jwb3JhdGluZyBhIGNvbXByZWhlbnNpdmUgYW5hbHlzaXMsIGluY29ycG9yYXRpbmcgdGhlIHJlcXVlc3RlZCBzdHJ1Y3R1cmUsIGFuZCBhaW1pbmcgZm9yIGEgZGVlcCBkaXZlIHdpdGhvdXQgdW5uZWNlc3NhcnkgbG9nby9leHRlcm5hbCBsaW5rcy4KCioqQ3JpY2tldCBNYXRjaCBSZXBvcnQ6IEVDQy1JSSB2cy4gUE9DQyAtIFQyMCBSZWdpb25hbCBMaWdhIC0gMjAyNSoqCgoqKk1hdGNoIFN1bW1hcnk6KioKCk9uIEFwcmlsIDI3LCAyMDI1LCBFQ0MtSUkgaG9zdGVkIFBPQ0MgaW4gYSBjcnVjaWFsIFQyMCBSZWdpb25hbCBMaWdhIG1hdGNoIGF0IEFUVjE4NzMgTsO8cm5iZXJnIChOQ0MpLiBFQ0MtSUkgZW1lcmdlZCB2aWN0b3Jpb3VzIGFmdGVyIGEgY2xvc2UgY29udGVzdCwgc2VjdXJpbmcgYSA4LXdpY2tldCBoYXVsLiAgVGhlIG1hdGNoIHNob3djYXNlZCBzaWduaWZpY2FudCBwZXJmb3JtYW5jZXMgZnJvbSBrZXkgcGxheWVycyBvbiBib3RoIHNpZGVzLCB3aXRoIFBPQ0MncyBiYXR0aW5nIHByb3dlc3MgdGFraW5nIGNlbnRlciBzdGFnZS4gIFdoaWxlIEVDQy1JSSBkb21pbmF0ZWQgdGhlIGZpZWxkLCB0aGUgbWF0Y2ggd2FzIGEgdGVzdGFtZW50IHRvIFBPQ0PigJlzIHJlc2lsaWVuY2UgYW5kIHRhY3RpY2FsIGFkanVzdG1lbnRzLgoKKipEZXRhaWxlZCBBbmFseXNpczoqKgoKKiAgICoqVGVhbSBDb250ZXh0OioqCiAgICAqICAgKipFQ0MtSUk6KiogVGhlIHRlYW0sIGFzIHBlciB0aGUgZGF0YSwgY29uc2lzdHMgb2YgMTQzNSBwbGF5ZXJzLiBUaGUgdGVhbeKAmXMgY2FwdGFpbiBpcyBBbmlsIERoYXJlY2hhIGFuZCB0aGUgY2FwdGFpbuKAmXMgY291bnRlcnBhcnQgaXMgUmFuaSBEaGFyZWNoYS4KICAgICogICAqKlBPQ0M6KiogIFRoZSB0ZWFtLCBhY2NvcmRpbmcgdG8gdGhlIGRhdGEsIGlzIGNvbXByaXNlZCBvZiAxNDQ2IHBsYXllcnMuCiogICAqKktleSBQZXJmb3JtYW5jZXM6KioKICAgICogICAqKkVDQy1JSToqKgogICAgICAgICogICAqKkJhdHNtZW46KiogIFN1bm55IEt1bWFyICg0MyBydW5zLCA4IHNpeGVzKSwgTW9oYW1tYWQgQmlsYWwgKDQxIHJ1bnMsIDEgaGl0KSBhbmQgQW1hbiBTaGFoICg0MyBydW5zLCAxIGhpdCkgd2VyZSBoaWdobGlnaHRlZCBhcyBrZXkgYmF0c21lbi4KICAgICAgICAqICAgKipCb3dsZXJzOioqICBUaGUgdGVhbSdzIGJvd2xlcnMgd2VyZSBwYXJ0aWN1bGFybHkgZWZmZWN0aXZlLCB3aXRoIEthcmFuIENoYWRkaGEgKDEwMSBydW5zLCAxIHdpY2tldHMpIGFuZCBLYXNoYW4gS2hhbiAoMTggcnVucywgMCB3aWNrZXRzKSBkZWxpdmVyaW5nIGNydWNpYWwgc3RyaWtlcy4gTW9oYW1tYWQgQmlsYWwgYW5kIE1vaGFtbWFkIEJpbGFsIHdlcmUgYm90aCBvdXRzdGFuZGluZyBib3dsZXJzLgogICAgICAgICogICAqKkZpZWxkaW5nOioqIFRoZSBmaWVsZGVycyB3ZXJlIGV4Y2VwdGlvbmFsbHkgZ29vZCB3aXRoIHRoZSB0ZWFtIGZpZWxkaW5nIHZlcnkgd2VsbCwgd2hpY2ggY29udHJpYnV0ZWQgc2lnbmlmaWNhbnRseSB0byB0aGVpciB3aW5zLgogICAgKiAgICoqUE9DQzoqKgogICAgICAgICogICAqKkJhdHNtZW46KiogIEFydW4gQ2hhdWRoYXJ5ICg0MSBydW5zLCAxIGhpdCksICBLYXNoYW4gS2hhbiAoMTcgcnVucywgMCBoaXRzKSBzaG93ZWQgYSBncmVhdCBkaXNwbGF5IG9mIGJhdHRpbmcuCiAgICAgICAgKiAgICoqQm93bGVyczoqKiAgVGhlIHRlYW0ncyBib3dsZXJzIGhhZCBhIHZlcnkgZ29vZCBkaXNwbGF5LCB3aXRoIHRoZSB0ZWFtIGJlaW5nIHN0cm9uZyB3aXRoIHRoZWlyIHN0cmlrZXMuCiAgICAgICAgKiAgICoqRmllbGRpbmc6KiogVGhlIGZpZWxkZXJzIHdlcmUgZXhjZWxsZW50IHdpdGggdGhlaXIgZGVmZW5zZSBhbmQgd2VyZSBhYmxlIHRvIGdpdmUgYW4gYWR2YW50YWdlLgoqICAgKipTaWduaWZpY2FudCBNb21lbnRzICYgVHVybmluZyBQb2ludHM6KioKICAgICogICAqKkVhcmx5IFByZXNzdXJlOioqIFRoZSBmaXJzdCBvdmVyIG9mIHRoZSBnYW1lIHNhdyBFQ0MtSUkgcHV0IHByZXNzdXJlIG9uIFBPQ0Mgd2l0aCBxdWljayBydW5zIGZyb20gU3VubnkgS3VtYXIuCiAgICAqICAgKipQT0NDJ3MgU3VyZ2U6KiogUE9DQyBjYXBpdGFsaXplZCBvbiB0aGlzIGVhcmx5IHByZXNzdXJlLCBlc3RhYmxpc2hpbmcgYSBzdHJvbmcgZm91bmRhdGlvbiB3aXRoIHRoZWlyIGFnZ3Jlc3NpdmUgYmF0dGluZy4KICAgICogICAqKk92ZXItdGhlLVRvcCBEZWxpdmVyeToqKiBBIHdlbGwtcGxhY2VkIGRlbGl2ZXJ5IGZyb20gS2FyYW4gQ2hhZGRoYSBicm9rZSBFQ0MtSUnigJlzIG1vbWVudHVtLgoqICAgKipNYXRjaC1DaGFuZ2luZyBFdmVudHM6KiogVGhlIGZpcnN0IHdpY2tldCBmYWxsIGFuZCB0aGUgc2Vjb25kIHdpY2tldCBmYWxsIHNpZ25pZmljYW50bHkgc2hpZnRlZCB0aGUgZ2FtZeKAmXMgbW9tZW50dW0uCiogICAqKk91dHMgYW5kIFdpY2tldHM6KioKICAgICogICAqKkVDQy1JSToqKiAgVGhleSB3ZXJlIGF3YXJkZWQgMTAgd2lja2V0cyBhbmQgMiBjYXRjaGVzLgogICAgKiAgICoqUE9DQzoqKiBUaGUgdGVhbSBoYWQgMTAgd2lja2V0cy4KKiAgICoqUGl0Y2ggQ29uZGl0aW9ucyAmIFdlYXRoZXI6KiogVGhlIHBpdGNoIGNvbmRpdGlvbnMgd2VyZSBkZXNjcmliZWQgYXMgXCJjaGFsbGVuZ2luZ1wiIGZvciB0aGUgYm93bGVycywgd2l0aCBhIGxvdCBvZiBtb3ZlbWVudC4KCioqUGl0Y2ggQ29udGV4dCAmIFdlYXRoZXI6KioKClRoZSBtYXRjaCB3YXMgcGxheWVkIG9uIGEgcGl0Y2ggY29uc2lkZXJlZCBcImNoYWxsZW5naW5nXCIg4oCTIG1lYW5pbmcgaXQgcG9zc2Vzc2VkIGEgaGlnaCBudW1iZXIgb2YgbW92ZW1lbnRzLCB3aGljaCBhZmZlY3RlZCB0aGUgZmxvdyBvZiB0aGUgZ2FtZS4gIFRoZXJlIHdhcyBzb21lIGxpZ2h0IGRyaXp6bGUvcmFpbiBhZmZlY3RpbmcgdGhlIGdhbWVwbGF5IGR1cmluZyB0aGUgbGF0dGVyIGhhbGYuCgoqKk92ZXJhbGwgU3RyYXRlZ3kgJiBUYWN0aWNhbCBPYnNlcnZhdGlvbnM6KioKCiogICAqKkVDQy1JSeKAmXMgU3RyYXRlZ3k6KiogRUNDLUlJIGxpa2VseSBhZG9wdGVkIGEgY2FsY3VsYXRlZCBhcHByb2FjaCwgZm9jdXNpbmcgb24gc3RlYWR5IHNjb3JpbmcgYW5kIGV4cGxvaXRpbmcgUE9DQ+KAmXMgcG90ZW50aWFsIGxhcHNlcyBpbiBjb25jZW50cmF0aW9uLgoqICAgKipQT0NDJ3MgU3RyYXRlZ3k6KiogUE9DQ+KAmXMgc3RyYXRlZ3kgY2VudGVyZWQgb24gYWdncmVzc2l2ZSBiYXR0aW5nLCBjYXBpdGFsaXppbmcgb24gdGhlIHByZXNzdXJlIGNyZWF0ZWQgYnkgRUNDLUlJ4oCZcyBlYXJseSB3aWNrZXRzLgoKKipDb25jbHVzaW9uOioqCgpFQ0MtSUkgZWFybmVkIGEgcmVzb3VuZGluZyB2aWN0b3J5IHRocm91Z2ggYSByb2J1c3QgcGVyZm9ybWFuY2UsIHNob3djYXNpbmcgdGhlaXIgYWJpbGl0eSB0byBzZWN1cmUgd2lja2V0cyBhbmQgZG9taW5hdGUgdGhlIGZpZWxkLiBQT0NDIGRpc3BsYXllZCByZXNpbGllbmNlLCBvdmVyY29taW5nIGFkdmVyc2l0eSBhbmQgc2VjdXJpbmcgYSBjb21tZW5kYWJsZSByZXN1bHQsIGRlc3BpdGUgdGhlIGNoYWxsZW5naW5nIHBpdGNoIGNvbmRpdGlvbnMuIFRoaXMgd2FzIGEgdmVyeSBjbG9zZSBtYXRjaCwgdGhhdCBoaWdobGlnaHRzIHRoZSBpbXBvcnRhbmNlIG9mIHN0cm9uZyBmaWVsZGluZyBhbmQgYmF0dGluZy4KCi0tLQoKSSd2ZSBmb2N1c2VkIG9uIG1ha2luZyB0aGlzIHJlcG9ydCBjbGVhciwgZGV0YWlsZWQsIGFuZCBzdWl0YWJsZSBmb3IgYW4gYW5hbHl0aWNhbCByZXBvcnQuICBMZXQgbWUga25vdyBpZiB5b3XigJlkIGxpa2UgbWUgdG8gZWxhYm9yYXRlIG9uIGFueSBzcGVjaWZpYyBhc3BlY3Qgb3IgcHJvdmlkZSBmdXJ0aGVyIGluc2lnaHRzLgo=";export{g as default};
